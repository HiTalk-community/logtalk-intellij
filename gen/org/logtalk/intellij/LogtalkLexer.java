/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.logtalk.intellij;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import org.logtalk.intellij.psi.LogtalkTypes;
import com.intellij.psi.TokenType;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Logtalk.flex</tt>
 */
class LogtalkLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int SENTENCE = 2;
  public static final int PARENTHESIZED_SYMBOLS = 4;
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int DOUBLE_QUOTE_STRING = 8;
  public static final int CHAR_CODE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 24560 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\1\23\1\24\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\2\41\1\42\7\41\1\43\1\44\1\45\1\41\1\46\1\47\2\41\31\21\1"+
    "\50\121\21\1\51\4\21\1\52\1\21\1\53\1\54\1\55\1\56\1\57\1\60\53\21\1\61\41"+
    "\41\1\21\1\62\1\63\1\21\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\21"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\3\41\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\41\1\114\1\41\1\115\1\116\2\41\3\21\1\117\1\120\1\121"+
    "\12\41\4\21\1\122\17\41\2\21\1\123\41\41\2\21\1\124\1\125\3\41\1\126\27\21"+
    "\1\127\2\21\1\130\45\41\1\131\1\132\1\133\11\41\1\134\24\41\1\135\1\136\1"+
    "\41\1\137\1\140\1\141\1\142\2\41\1\143\5\41\1\144\7\41\1\145\1\146\4\41\1"+
    "\147\2\41\1\150\16\41\246\21\1\151\20\21\1\152\1\153\25\21\1\154\34\155\1"+
    "\156\14\41\2\21\1\157\u0b05\41\1\160\1\161\u02fe\41");

  /* The ZZ_CMAP_Y table has 7296 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\4\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\2\23\1\25\1\26\1\0\1\27\6\0\1\30\1\31\1\32\1"+
    "\33\1\3\1\34\1\32\1\3\5\16\1\35\1\16\1\36\5\23\1\37\2\23\16\40\4\41\1\42\13"+
    "\40\1\43\1\44\1\45\1\46\1\47\1\50\1\43\1\46\1\51\1\43\1\40\1\46\1\44\1\46"+
    "\1\47\1\41\1\52\1\51\1\53\1\54\1\55\4\41\1\42\4\40\1\56\1\46\17\40\1\23\1"+
    "\50\1\45\1\41\1\36\2\40\21\23\1\57\10\23\1\60\1\53\1\61\1\62\2\53\1\63\3\3"+
    "\1\23\1\64\1\3\1\65\4\3\21\0\1\66\12\0\1\40\1\67\1\70\1\71\1\3\1\72\1\35\1"+
    "\73\1\47\3\16\1\74\2\16\10\23\1\75\1\50\1\51\6\40\1\23\1\76\1\45\1\47\14\16"+
    "\14\23\10\40\1\77\1\0\1\100\15\40\1\43\2\41\1\44\30\40\1\101\10\16\1\35\1"+
    "\102\1\3\1\103\11\23\1\3\1\104\1\105\12\0\1\106\1\107\1\106\2\3\6\53\1\110"+
    "\1\3\1\110\3\3\1\0\1\31\1\104\1\3\2\0\1\111\1\112\12\53\1\113\5\0\2\114\1"+
    "\115\1\62\1\116\30\53\1\117\1\0\1\106\1\0\1\120\1\121\1\122\2\114\1\123\1"+
    "\124\3\3\1\104\1\125\7\53\6\0\1\111\1\126\25\53\1\127\2\0\1\130\3\3\2\114"+
    "\1\123\7\53\1\113\2\0\1\63\1\131\1\3\5\53\1\127\1\132\2\0\2\133\1\31\4\3\6"+
    "\53\1\133\1\3\2\0\1\111\15\3\5\53\1\134\1\53\1\63\5\3\14\0\15\53\1\127\1\135"+
    "\4\0\1\133\1\0\2\53\1\127\1\136\2\114\1\126\3\53\1\133\1\126\1\53\2\124\5"+
    "\53\1\134\1\53\1\65\1\62\1\63\1\135\1\0\2\137\1\140\1\3\1\104\1\3\1\141\1"+
    "\127\1\136\2\114\1\127\1\3\1\104\1\112\1\105\1\126\1\110\1\142\1\124\5\53"+
    "\1\134\1\53\1\134\1\143\1\63\1\121\1\111\1\104\1\137\1\31\1\33\1\3\1\126\1"+
    "\65\1\3\1\136\2\114\1\122\1\144\2\3\1\105\1\126\1\53\2\141\5\53\1\134\1\53"+
    "\1\134\1\126\1\63\1\135\1\0\2\106\1\31\1\145\3\3\1\127\1\136\2\114\1\33\1"+
    "\3\1\117\1\0\1\105\1\126\1\53\2\124\5\53\1\134\1\53\1\134\1\126\1\63\1\135"+
    "\1\0\2\137\1\31\1\3\1\30\1\3\1\141\1\127\1\136\2\114\1\102\3\3\1\146\1\126"+
    "\1\110\1\62\1\134\1\63\1\143\1\134\1\142\1\145\1\110\1\62\2\53\1\63\1\30\1"+
    "\111\1\30\1\121\1\31\1\145\1\104\3\3\1\136\2\114\2\3\1\33\1\3\1\0\1\126\1"+
    "\53\2\134\5\53\1\134\3\53\1\63\1\117\1\0\2\121\1\31\1\3\1\107\1\110\1\3\1"+
    "\127\1\136\2\114\4\3\1\133\1\126\1\53\2\134\5\53\1\134\2\53\1\126\1\63\1\135"+
    "\1\0\2\121\1\31\1\3\1\107\1\3\1\131\1\127\1\136\2\114\1\143\3\3\1\0\1\126"+
    "\1\53\2\134\11\53\1\113\1\135\1\0\2\121\1\140\1\3\1\113\1\3\1\142\1\127\1"+
    "\136\2\114\2\3\1\62\1\53\1\30\1\126\3\53\1\110\1\62\5\53\1\141\2\53\1\102"+
    "\1\53\1\110\1\147\1\104\1\0\1\150\2\0\1\3\1\136\2\114\1\30\3\3\1\126\13\53"+
    "\1\125\1\0\1\111\1\104\1\53\1\113\1\0\1\111\2\114\1\115\11\3\1\143\1\124\1"+
    "\65\1\102\1\3\1\53\1\126\1\53\1\126\1\151\1\62\1\126\1\125\1\0\1\106\1\130"+
    "\1\53\1\65\1\0\1\31\2\114\1\115\1\53\10\3\1\145\5\3\1\31\1\3\2\114\1\115\2"+
    "\3\1\152\1\33\1\30\2\53\1\126\10\53\1\145\1\105\4\0\1\121\1\53\1\133\2\0\1"+
    "\105\10\0\1\112\1\3\1\147\16\3\12\53\1\113\4\0\1\153\2\114\1\115\1\3\1\53"+
    "\1\127\1\122\1\127\1\135\1\120\1\0\1\122\1\133\1\116\2\53\1\127\2\0\1\132"+
    "\2\114\1\154\1\31\11\16\1\74\1\3\1\155\12\53\1\110\123\53\1\134\1\63\1\53"+
    "\1\110\1\134\1\63\12\53\1\134\1\63\10\53\1\134\1\63\1\53\1\110\1\134\1\63"+
    "\3\53\1\110\16\53\1\134\1\63\20\53\1\110\1\105\10\3\4\53\4\3\25\16\1\156\1"+
    "\23\1\61\1\126\132\53\1\124\4\53\1\126\5\53\1\110\1\3\22\53\1\110\1\30\1\116"+
    "\1\53\1\145\1\3\3\53\1\134\1\127\1\112\2\3\4\53\1\127\1\112\2\3\4\53\1\127"+
    "\3\3\3\53\1\134\1\157\3\3\15\53\10\0\1\142\1\104\1\144\2\114\1\115\7\3\1\104"+
    "\1\111\2\114\1\115\1\3\26\53\2\3\1\53\1\160\10\53\1\161\1\3\21\53\1\63\2\3"+
    "\7\53\1\110\3\0\1\3\3\0\2\3\1\136\2\114\7\53\1\63\1\53\1\145\2\3\13\53\1\3"+
    "\6\53\1\63\1\3\2\114\1\115\11\3\5\53\1\113\1\0\1\3\15\53\1\133\1\0\1\111\7"+
    "\0\1\137\2\114\1\115\1\3\2\114\1\115\2\3\1\142\2\3\3\0\1\31\20\3\1\0\1\116"+
    "\13\53\4\0\1\116\1\53\1\3\2\114\1\115\3\3\1\104\2\0\3\3\1\153\7\53\1\133\2"+
    "\0\1\122\2\114\1\123\12\53\1\127\3\0\3\3\11\53\5\0\2\3\2\114\1\115\1\126\2"+
    "\114\1\123\10\53\1\63\2\23\1\64\21\3\1\111\5\0\1\116\1\125\1\127\1\120\1\31"+
    "\1\3\60\23\16\0\1\106\1\0\45\40\1\51\1\23\1\42\30\40\2\23\2\16\1\23\1\61\1"+
    "\16\1\156\2\23\2\16\2\23\2\16\1\23\1\61\1\16\1\156\2\23\2\162\2\23\2\16\3"+
    "\23\1\61\2\23\2\53\2\23\2\53\2\23\2\53\1\23\1\163\1\16\1\164\1\70\1\163\1"+
    "\16\1\145\1\23\1\70\1\16\1\3\2\23\1\16\1\165\1\70\1\163\1\16\1\145\2\3\1\104"+
    "\1\0\6\3\1\166\1\111\3\3\1\104\1\112\4\3\1\112\2\3\1\0\1\121\2\0\1\34\2\3"+
    "\1\167\4\3\3\23\1\64\10\0\4\3\3\0\1\112\1\33\1\105\2\0\1\112\3\3\1\72\1\170"+
    "\1\171\1\172\1\36\1\155\1\101\1\156\1\3\1\173\1\73\1\174\1\16\1\60\1\175\1"+
    "\50\1\3\1\176\1\61\1\32\4\3\4\177\4\200\1\201\1\202\1\112\212\3\1\203\6\204"+
    "\6\205\1\206\5\3\13\16\1\35\13\23\1\37\1\46\1\207\1\41\1\47\1\40\1\44\1\23"+
    "\1\50\31\40\1\64\1\170\1\210\1\211\3\3\11\23\1\212\1\3\1\34\16\53\1\3\1\142"+
    "\3\3\1\104\5\53\1\110\2\3\1\53\1\110\1\53\1\110\1\53\1\110\1\53\1\110\1\53"+
    "\1\110\1\53\1\110\1\53\1\110\1\53\1\110\10\0\13\3\1\142\65\3\1\213\6\3\1\105"+
    "\3\0\1\126\1\63\1\153\1\145\1\126\24\53\1\110\1\107\2\126\25\53\1\110\1\53"+
    "\1\3\1\126\11\53\1\214\1\126\26\53\1\110\4\3\6\53\1\110\15\3\61\53\1\63\22"+
    "\3\65\53\1\127\4\0\1\111\5\3\43\53\1\145\20\3\13\53\1\63\3\53\1\145\4\53\2"+
    "\114\1\123\5\3\13\40\1\215\1\3\2\0\1\216\7\40\1\217\21\53\1\127\2\0\1\31\10"+
    "\3\1\142\2\53\1\100\3\40\1\42\17\40\2\23\1\41\1\45\2\40\1\220\1\221\1\40\1"+
    "\42\4\40\1\46\1\35\1\16\1\40\17\3\1\142\1\222\1\53\2\223\1\113\5\53\1\113"+
    "\1\0\4\3\1\112\1\3\15\53\3\3\1\122\14\53\4\0\1\31\2\3\2\114\1\115\1\3\4\0"+
    "\1\122\1\53\1\142\1\102\2\114\1\123\6\53\1\127\1\0\1\31\5\53\1\113\3\0\3\3"+
    "\7\53\1\145\1\0\13\53\1\113\3\0\1\112\2\3\1\142\2\114\1\115\1\3\1\53\1\125"+
    "\2\53\2\114\1\123\1\110\12\53\1\133\2\0\1\111\2\3\1\113\2\53\1\31\2\114\1"+
    "\115\1\3\5\53\1\110\1\224\1\122\14\53\1\135\1\120\1\116\1\127\1\161\5\3\1"+
    "\142\1\63\2\53\1\113\1\0\1\62\1\225\2\3\1\126\1\110\1\126\1\110\1\126\1\110"+
    "\2\3\1\53\1\110\1\53\1\110\12\23\1\37\2\23\1\61\2\3\24\23\10\53\1\113\1\0"+
    "\1\111\1\31\2\114\1\115\1\3\51\53\3\3\5\53\1\110\1\142\14\53\1\3\33\53\1\63"+
    "\32\53\1\63\11\3\1\23\1\37\2\3\1\167\1\23\1\3\1\226\2\53\1\134\2\53\1\110"+
    "\1\53\1\65\1\141\1\134\32\53\1\63\7\3\1\142\32\53\1\63\4\3\20\53\1\62\15\53"+
    "\12\3\3\53\1\112\4\0\4\3\4\0\1\104\1\112\5\3\1\105\6\3\1\33\1\3\1\53\1\134"+
    "\41\53\1\227\1\3\1\112\2\3\2\114\1\115\1\3\1\101\5\16\1\35\1\104\1\103\5\23"+
    "\1\37\2\3\1\62\25\53\1\110\1\62\1\53\1\62\1\53\1\62\1\53\1\62\1\145\1\31\1"+
    "\107\4\3\1\105\1\3\3\53\1\126\5\53\1\110\4\53\1\110\1\141\3\53\1\63\3\53\1"+
    "\63\10\3\36\53\1\110\21\3\15\0\1\112\41\3\1\33\40\3\7\53\1\145\14\53\1\145"+
    "\3\3\1\112\7\3\10\53\3\3\1\105\4\53\1\125\1\53\1\214\1\3\11\53\1\127\1\111"+
    "\1\3\7\53\1\63\11\53\1\3\2\53\1\105\1\31\12\3\12\16\12\23\23\53\1\63\2\114"+
    "\1\115\1\3\11\16\1\3\11\23\1\3\12\53\2\3\15\53\47\3\15\53\1\110\2\3\5\53\1"+
    "\63\2\3\2\53\46\3\1\53\1\63\1\134\12\53\1\141\1\145\1\124\5\53\1\63\2\3\5"+
    "\53\1\110\2\3\7\53\1\110\20\3\4\53\1\110\1\63\2\3\5\53\1\63\2\3\6\53\1\63"+
    "\21\3\16\53\1\3\1\62\20\3\1\133\1\107\1\3\1\0\1\53\2\126\6\53\1\3\1\111\1"+
    "\104\10\3\7\53\1\145\7\53\1\145\10\3\2\53\1\126\6\53\1\225\6\3\15\53\1\63"+
    "\2\3\5\53\1\63\2\3\4\53\1\110\3\3\4\53\1\63\33\3\22\53\1\145\15\3\14\16\1"+
    "\35\3\3\14\23\1\37\3\3\1\153\15\53\3\0\1\111\7\3\1\136\2\114\3\3\1\104\1\153"+
    "\13\53\2\0\1\111\1\33\4\3\6\53\1\145\1\3\2\114\1\115\1\3\1\153\10\53\1\113"+
    "\3\0\1\230\2\114\4\3\10\53\1\113\1\131\2\3\1\153\13\53\1\113\3\0\1\116\1\145"+
    "\1\30\1\112\2\114\1\231\1\145\10\3\4\53\1\141\6\53\3\0\1\3\1\147\20\3\1\53"+
    "\1\110\1\134\1\141\3\53\1\141\2\53\1\145\1\3\13\53\1\113\2\0\1\111\1\3\2\114"+
    "\1\115\1\3\1\0\1\126\1\53\2\124\5\53\1\134\1\53\1\134\1\126\1\63\1\135\1\0"+
    "\2\137\1\31\1\145\1\104\1\3\1\126\1\127\1\30\1\0\1\112\1\0\1\112\42\3\15\53"+
    "\1\133\3\0\1\153\1\110\1\3\2\114\1\115\11\3\14\53\5\0\1\141\2\3\2\114\1\115"+
    "\51\3\13\53\1\113\1\0\1\31\2\0\1\112\5\3\1\53\1\31\10\3\14\53\4\0\1\112\1"+
    "\145\2\3\2\114\1\115\11\3\12\53\1\113\3\0\2\3\2\114\1\115\15\3\6\53\1\63\1"+
    "\105\3\0\1\3\2\114\1\115\131\3\10\16\10\23\2\114\1\115\4\3\1\142\17\0\1\111"+
    "\1\3\1\104\2\3\15\0\1\30\4\0\1\31\11\3\16\53\1\145\1\3\2\53\1\134\10\53\1"+
    "\113\1\0\1\111\2\0\1\145\3\3\2\114\1\115\5\3\1\62\7\53\1\30\5\0\1\105\2\0"+
    "\1\111\22\3\1\0\1\111\1\106\12\0\1\111\1\147\1\106\2\0\2\3\2\0\1\31\51\3\46"+
    "\53\1\63\31\3\33\0\1\111\4\3\61\53\57\3\13\53\1\110\64\3\21\53\1\110\56\3"+
    "\16\53\1\145\1\3\7\53\1\110\2\114\1\115\31\3\7\53\1\63\1\0\1\112\2\3\14\53"+
    "\1\0\1\111\2\3\1\53\3\3\2\114\1\115\1\3\1\142\5\53\1\3\1\126\4\53\34\3\21"+
    "\53\1\145\2\3\1\133\12\0\1\111\3\3\1\104\1\153\3\53\20\3\1\144\7\3\73\53\1"+
    "\145\4\3\74\53\1\110\3\3\1\127\106\0\1\111\24\3\143\0\1\3\32\53\1\110\1\3"+
    "\3\53\1\145\2\53\1\145\1\3\2\53\1\63\1\107\1\0\60\3\1\105\1\31\1\105\4\0\1"+
    "\111\1\105\1\0\7\3\1\30\1\31\44\3\1\30\1\112\56\3\6\16\1\172\6\23\6\16\1\172"+
    "\1\23\1\163\4\23\6\16\1\172\6\23\1\73\1\72\1\232\1\101\1\73\1\16\1\172\1\212"+
    "\1\103\1\23\1\103\2\23\6\16\1\172\6\23\1\74\1\35\1\101\1\16\1\73\1\16\1\233"+
    "\6\23\1\74\1\35\1\16\1\173\1\234\1\16\1\233\6\23\6\16\1\172\6\23\6\16\1\172"+
    "\6\23\6\16\1\172\6\23\6\16\1\172\6\23\6\16\1\172\6\23\6\16\1\172\6\23\1\61"+
    "\6\16\1\233\5\23\1\37\1\23\1\50\5\16\1\35\6\23\1\163\1\23\6\16\1\233\5\23"+
    "\1\37\1\23\1\50\5\16\1\35\6\23\1\163\1\23\6\16\1\233\5\23\1\37\1\23\1\42\1"+
    "\136\14\114\15\0\1\111\1\104\14\0\1\112\1\3\1\33\3\3\1\112\4\3\1\104\1\0\1"+
    "\105\3\0\24\3\1\0\1\111\4\0\1\137\1\0\1\106\1\121\1\111\65\3\61\53\1\145\2"+
    "\3\1\0\1\111\12\3\10\16\1\172\10\23\1\0\1\111\1\3\2\114\1\115\51\3\1\53\1"+
    "\126\6\53\1\143\1\124\1\126\1\53\1\110\1\53\1\151\1\3\1\131\1\142\1\151\1"+
    "\126\1\143\1\124\2\151\1\143\1\124\1\110\1\53\1\110\1\53\1\126\1\65\2\53\1"+
    "\141\4\53\1\3\2\126\1\141\4\53\35\3\6\204\1\235\1\3\6\204\1\235\1\3\6\204"+
    "\1\235\35\3\65\53\1\110\12\3\15\53\1\145\2\3\67\53\1\63\140\53\1\63\3\3\214"+
    "\0\1\112\7\3\7\53\1\63\70\3\1\33\7\3\30\0\40\3\74\0\4\3");

  /* The ZZ_CMAP_A table has 632 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\36\1\54\1\23\2\22\1\24\2\36\4\0\1\25\1\7\1\35\1\52\1\53\1\47\1\52\1\20"+
    "\1\1\1\2\1\51\1\26\1\7\1\26\1\10\1\50\1\14\1\31\6\32\2\34\7\52\4\33\1\30\1"+
    "\33\10\45\1\3\1\21\1\4\1\52\1\13\1\0\1\42\1\15\2\42\1\27\1\42\10\41\1\16\1"+
    "\17\2\41\1\5\1\7\1\6\1\52\2\36\1\37\2\36\2\0\4\36\4\0\1\41\2\0\1\36\3\0\1"+
    "\41\2\0\3\45\1\0\3\45\4\41\1\0\1\45\1\41\1\45\2\41\1\45\1\41\1\45\2\41\1\45"+
    "\1\41\2\45\1\41\1\45\1\41\1\45\3\41\2\45\1\41\1\45\1\41\2\45\1\41\3\45\2\41"+
    "\3\45\3\41\1\45\2\41\5\11\1\45\1\11\1\41\1\45\1\11\1\41\1\45\1\11\1\41\1\45"+
    "\1\11\1\41\1\11\4\41\3\11\2\41\4\0\4\11\2\0\1\41\3\0\1\11\1\0\1\11\1\0\1\36"+
    "\1\43\2\36\1\11\1\0\1\45\1\41\2\0\4\41\1\0\1\45\2\0\1\45\1\0\1\45\1\0\4\45"+
    "\1\0\1\45\3\41\2\45\1\41\1\0\2\45\1\41\1\0\1\36\2\0\1\45\1\41\1\0\3\45\1\0"+
    "\1\11\3\0\3\41\3\0\1\36\1\0\5\36\1\0\1\36\1\0\2\36\1\0\3\11\1\0\3\36\1\0\1"+
    "\36\3\0\3\11\1\36\6\12\2\0\1\36\3\11\1\0\1\11\3\36\2\11\2\36\1\0\4\36\2\11"+
    "\2\12\3\11\2\0\2\11\1\36\2\11\1\0\5\11\3\36\1\11\4\0\1\11\1\0\2\36\1\11\1"+
    "\36\1\11\3\36\1\11\1\0\2\11\1\36\1\11\2\36\2\0\2\12\1\36\2\0\3\36\1\11\1\0"+
    "\2\11\1\0\1\11\3\0\1\11\1\0\2\11\1\0\1\11\1\36\2\0\1\11\5\0\1\36\1\11\2\0"+
    "\1\36\1\0\1\36\1\0\1\36\2\0\1\11\1\0\1\11\1\0\1\36\1\0\4\36\1\11\2\12\2\36"+
    "\1\0\1\45\2\0\2\45\2\0\1\11\1\0\2\36\1\11\2\36\2\11\1\36\1\11\2\0\1\45\1\0"+
    "\1\45\1\41\1\0\2\41\1\11\1\0\1\41\1\0\1\45\3\0\2\22\2\36\3\0\1\41\3\0\1\45"+
    "\2\0\1\41\3\45\2\41\1\45\1\0\1\45\1\0\2\45\1\0\1\41\1\11\1\41\3\0\1\45\2\41"+
    "\4\46\4\43\3\36\1\45\1\41\3\36\2\0\6\44\6\40\2\0\1\45\2\41\1\45\1\41\1\45"+
    "\1\41\3\36\1\45\3\41\1\0\1\41\1\0\2\11\1\36\2\11\1\36\1\0\1\45\1\41\1\11\3"+
    "\36\1\0\1\11\2\41\2\36\1\11\2\0\1\45\1\41\1\45\1\41\1\11\3\41\3\11\1\36\1"+
    "\11\2\0\1\11\1\36\1\11\2\36\2\0\1\11\1\36\2\11\2\0\2\36\1\0\4\12\1\11\2\0"+
    "\2\45\1\0\1\45\1\0\2\41\2\0\2\45\2\44\2\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\6\1\10\1\11\1\5\1\12\1\13\1\14"+
    "\1\15\1\5\1\16\1\17\1\20\1\21\2\5\1\22"+
    "\1\23\1\22\3\24\3\22\1\24\1\25\1\1\4\0"+
    "\1\26\1\5\1\27\5\0\1\30\3\5\1\31\1\0"+
    "\1\32\3\0\1\5\1\33\1\6\1\0\1\34\1\35"+
    "\1\36\1\37\1\5\1\0\1\26\4\5\2\40\3\0"+
    "\1\32\4\0\1\5\1\0\1\5\1\0\4\5\1\15"+
    "\1\5\2\0\1\32\10\0\1\5\1\33\1\0\1\5"+
    "\1\15\2\5\1\15\2\5\1\15\6\0\1\32\36\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"+
    "\0\u010e\0\u010e\0\u010e\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c"+
    "\0\u010e\0\u0249\0\u0276\0\u02a3\0\u010e\0\u02d0\0\u02fd\0\u010e"+
    "\0\u010e\0\u010e\0\u0168\0\u032a\0\u0357\0\u0384\0\u03b1\0\u03de"+
    "\0\u0384\0\u010e\0\u040b\0\u010e\0\u0438\0\u0465\0\u0438\0\u010e"+
    "\0\u0492\0\u04bf\0\u04ec\0\u013b\0\u0519\0\u010e\0\u0546\0\u010e"+
    "\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654\0\u0681\0\u06ae"+
    "\0\u06db\0\u010e\0\u0708\0\u010e\0\u0735\0\u0762\0\u078f\0\u07bc"+
    "\0\u07e9\0\u0816\0\u0816\0\u05cd\0\u05fa\0\u0627\0\u010e\0\u0843"+
    "\0\u0870\0\u0870\0\u089d\0\u08ca\0\u08f7\0\u0924\0\u010e\0\u0951"+
    "\0\u097e\0\u09ab\0\u09d8\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\u0a8c"+
    "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0bc7\0\u0bf4"+
    "\0\u0bc7\0\u0c21\0\u0c4e\0\u0c7b\0\u0c4e\0\u0ca8\0\u0cd5\0\u0d02"+
    "\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10\0\u0e3d\0\u0e3d"+
    "\0\u0e6a\0\u010e\0\u0e97\0\u0ec4\0\u0e10\0\u0ef1\0\u0f1e\0\u0e6a"+
    "\0\u0f4b\0\u0f78\0\u0fa5\0\u0fd2\0\u0fff\0\u102c\0\u102c\0\u1059"+
    "\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u0e10\0\u0e97\0\u0ec4"+
    "\0\u1167\0\u1194\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u1275\0\u12a2"+
    "\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd\0\u140a"+
    "\0\u1437\0\u1464\0\u1491\0\u14be\0\u14eb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\7\1\11\1\7\1\12\1\7\1\13"+
    "\1\14\1\7\1\15\1\16\1\17\3\20\1\21\1\22"+
    "\4\23\1\22\1\20\1\24\2\15\1\24\1\15\1\25"+
    "\1\7\1\23\4\20\3\24\1\26\1\27\3\22\1\23"+
    "\1\7\1\10\1\30\1\11\1\31\1\12\1\32\1\13"+
    "\1\33\1\7\1\15\1\16\1\17\3\20\1\21\1\22"+
    "\4\23\1\22\1\20\1\24\2\15\1\24\1\15\1\25"+
    "\1\7\1\23\4\20\3\24\1\26\1\27\3\22\1\23"+
    "\7\7\1\13\1\34\10\7\1\34\4\23\1\34\10\7"+
    "\1\23\7\7\1\26\1\35\3\34\1\23\20\36\1\37"+
    "\1\40\1\41\1\42\1\43\12\36\1\41\14\36\1\44"+
    "\21\45\1\46\1\47\1\42\1\43\10\45\1\50\1\45"+
    "\1\47\14\45\1\44\14\7\1\51\5\7\3\0\12\7"+
    "\1\0\15\7\64\0\1\52\1\53\10\0\1\53\4\54"+
    "\1\53\10\0\1\54\10\0\1\55\3\53\1\54\1\0"+
    "\1\56\6\0\1\57\7\60\1\0\1\57\4\0\1\57"+
    "\6\60\4\0\2\60\2\0\1\60\2\0\4\57\11\0"+
    "\1\61\1\0\1\15\1\0\1\15\12\0\2\62\2\15"+
    "\1\0\1\15\31\0\7\16\7\0\6\16\1\0\2\16"+
    "\1\0\3\16\1\0\2\16\4\0\1\16\11\0\1\61"+
    "\1\0\1\15\1\0\1\15\1\63\1\64\1\65\1\66"+
    "\6\0\2\62\2\15\1\0\1\15\21\0\1\56\7\0"+
    "\7\20\7\0\6\20\1\0\2\20\1\0\3\20\1\0"+
    "\2\20\4\0\1\20\2\0\1\56\6\0\1\57\10\0"+
    "\1\67\4\0\1\67\21\0\4\67\23\0\4\23\11\0"+
    "\1\23\14\0\1\23\11\0\7\24\7\0\6\24\1\0"+
    "\2\24\1\0\3\24\1\0\2\24\4\0\1\24\1\0"+
    "\23\26\2\0\30\26\1\0\1\56\6\0\1\57\10\0"+
    "\1\67\4\0\1\67\21\0\1\67\1\70\2\67\11\0"+
    "\1\34\10\0\1\34\4\0\1\34\21\0\4\34\11\0"+
    "\1\34\10\0\1\34\4\0\1\34\21\0\1\34\1\71"+
    "\2\34\1\0\20\36\2\0\1\36\2\0\27\36\2\0"+
    "\1\72\16\0\1\44\54\0\1\44\57\0\1\42\31\0"+
    "\21\45\1\0\1\45\2\0\10\45\1\0\16\45\36\0"+
    "\1\44\37\0\1\73\36\0\1\74\17\0\4\52\11\0"+
    "\1\52\10\0\1\75\3\0\1\52\2\0\1\74\5\0"+
    "\1\53\10\0\1\53\4\52\1\53\10\0\1\52\10\0"+
    "\1\76\3\53\1\52\2\0\1\74\5\0\1\53\10\0"+
    "\1\53\4\52\1\53\10\0\1\52\10\0\1\76\1\77"+
    "\2\53\1\52\1\0\1\56\6\0\1\100\10\0\1\100"+
    "\4\0\1\100\21\0\4\100\13\0\1\101\1\0\1\101"+
    "\14\0\2\101\1\0\1\101\32\0\1\102\1\0\1\102"+
    "\11\0\1\103\2\0\2\102\1\0\1\102\34\0\1\104"+
    "\14\0\1\104\37\0\1\105\14\0\2\105\35\0\3\106"+
    "\11\0\6\106\5\0\1\106\33\0\1\107\34\0\1\56"+
    "\6\0\1\100\10\0\1\110\4\0\1\110\21\0\4\110"+
    "\1\0\1\111\1\112\6\111\1\113\10\111\1\114\4\111"+
    "\1\114\21\111\1\114\1\115\2\114\11\111\1\116\10\111"+
    "\1\116\4\111\1\116\21\111\4\116\1\111\21\117\1\120"+
    "\3\0\12\117\1\0\15\117\51\0\1\121\5\0\1\74"+
    "\5\0\1\53\10\0\1\53\4\52\1\53\10\0\1\52"+
    "\10\0\1\76\1\122\2\53\1\52\2\123\1\124\5\123"+
    "\1\125\10\123\1\125\4\126\1\125\10\123\1\126\10\123"+
    "\1\127\1\130\2\125\1\126\1\0\1\56\6\0\1\131"+
    "\10\0\1\131\4\0\1\131\21\0\4\131\13\0\1\101"+
    "\1\0\1\101\12\0\2\132\2\101\1\0\1\101\32\0"+
    "\1\102\1\0\1\102\14\0\2\102\1\0\1\102\21\0"+
    "\1\56\6\0\1\131\10\0\1\133\4\0\1\133\21\0"+
    "\4\133\1\0\51\111\1\134\4\111\1\112\6\111\1\135"+
    "\10\111\1\135\4\111\1\135\21\111\1\135\1\136\2\135"+
    "\2\111\1\112\6\111\1\135\10\111\1\137\4\111\1\137"+
    "\21\111\1\137\1\140\2\137\2\111\1\112\6\111\1\135"+
    "\10\111\1\137\4\111\1\137\21\111\1\141\1\140\2\137"+
    "\11\111\1\116\10\111\1\116\4\111\1\116\21\111\1\116"+
    "\1\142\2\116\1\111\22\117\3\0\12\117\1\0\15\117"+
    "\51\143\1\144\5\143\1\145\5\143\1\146\10\143\1\146"+
    "\4\147\1\146\10\143\1\147\10\143\1\150\3\146\1\147"+
    "\51\123\1\151\5\123\1\124\5\123\1\125\10\123\1\125"+
    "\4\126\1\125\10\123\1\126\10\123\1\127\1\152\2\125"+
    "\1\126\2\123\1\124\17\123\4\126\11\123\1\126\10\123"+
    "\1\153\1\151\2\123\1\126\2\123\1\124\5\123\1\125"+
    "\10\123\1\125\4\126\1\125\10\123\1\126\10\123\1\127"+
    "\1\154\2\125\1\126\2\123\1\124\5\123\1\125\10\123"+
    "\1\125\4\126\1\125\10\123\1\126\10\123\1\155\1\152"+
    "\2\125\1\126\1\0\1\56\6\0\1\156\10\0\1\156"+
    "\4\0\1\156\21\0\4\156\13\0\1\157\1\0\1\157"+
    "\11\0\1\160\2\0\2\157\1\0\1\157\21\0\1\56"+
    "\6\0\1\156\10\0\1\161\4\0\1\161\21\0\4\161"+
    "\1\0\50\111\1\162\1\134\4\111\1\112\6\111\1\163"+
    "\10\111\1\163\4\111\1\163\21\111\1\163\1\164\2\163"+
    "\2\111\1\112\6\111\1\163\10\111\1\163\4\111\1\163"+
    "\21\111\1\165\1\164\2\163\2\111\1\112\6\111\1\163"+
    "\10\111\1\166\4\111\1\166\21\111\1\166\1\167\2\166"+
    "\2\111\1\112\6\111\1\163\10\111\1\166\4\111\1\166"+
    "\21\111\1\170\1\167\2\166\11\111\1\116\10\111\1\116"+
    "\4\111\1\116\21\111\1\34\1\142\2\116\1\111\51\143"+
    "\1\171\53\143\1\147\1\171\5\143\1\145\5\143\1\146"+
    "\10\143\1\146\4\147\1\146\10\143\1\147\10\143\1\150"+
    "\1\172\2\146\1\147\2\143\1\145\17\143\4\147\11\143"+
    "\1\147\10\143\1\173\1\171\2\143\1\147\2\143\1\145"+
    "\5\143\1\146\10\143\1\146\4\147\1\146\10\143\1\147"+
    "\10\143\1\150\1\122\2\146\1\147\50\123\1\54\1\151"+
    "\5\123\1\124\5\123\1\125\10\123\1\125\4\126\1\125"+
    "\10\123\1\126\10\123\1\174\1\152\2\125\1\126\51\123"+
    "\1\175\3\123\2\176\1\177\5\176\1\200\10\176\1\200"+
    "\4\201\1\200\10\176\1\201\10\176\1\202\1\203\2\200"+
    "\1\201\2\123\1\124\4\123\1\126\1\125\10\123\1\125"+
    "\4\204\1\125\10\123\1\204\10\123\1\205\1\154\2\125"+
    "\1\204\1\0\1\56\6\0\1\206\10\0\1\206\4\0"+
    "\1\206\21\0\4\206\13\0\1\157\1\0\1\157\14\0"+
    "\2\157\1\0\1\157\21\0\1\56\6\0\1\206\10\0"+
    "\1\161\4\0\1\161\21\0\4\161\1\0\1\111\1\112"+
    "\6\111\1\207\10\111\1\207\4\111\1\207\21\111\1\207"+
    "\1\210\2\207\2\111\1\112\6\111\1\207\10\111\1\207"+
    "\4\111\1\207\21\111\1\165\1\210\2\207\2\111\1\112"+
    "\6\111\1\207\10\111\1\166\4\111\1\166\21\111\1\166"+
    "\1\167\2\166\2\111\1\112\6\111\1\207\10\111\1\166"+
    "\4\111\1\166\21\111\1\170\1\167\2\166\1\111\50\143"+
    "\1\52\1\171\5\143\1\145\5\143\1\146\10\143\1\146"+
    "\4\147\1\146\10\143\1\147\10\143\1\76\1\172\2\146"+
    "\1\147\51\143\1\211\3\143\2\0\1\74\4\0\1\52"+
    "\1\53\10\0\1\53\4\212\1\53\10\0\1\212\10\0"+
    "\1\213\1\122\2\53\1\212\50\176\1\214\1\215\54\176"+
    "\1\216\5\176\1\177\5\176\1\200\10\176\1\200\4\201"+
    "\1\200\10\176\1\201\10\176\1\217\1\220\2\200\1\201"+
    "\2\176\1\177\17\176\4\201\11\176\1\201\10\176\1\221"+
    "\1\216\2\176\1\201\2\143\1\145\4\143\1\147\1\146"+
    "\10\143\1\146\4\222\1\146\10\143\1\222\10\143\1\223"+
    "\1\122\2\146\1\222\2\176\1\177\5\176\1\200\10\176"+
    "\1\200\4\201\1\200\10\176\1\201\10\176\1\202\1\220"+
    "\2\200\1\201\2\123\1\124\4\123\1\126\1\125\10\123"+
    "\1\125\4\204\1\125\10\123\1\204\10\123\1\205\1\152"+
    "\2\125\1\204\2\123\1\124\5\123\1\125\10\123\1\125"+
    "\4\126\1\125\10\123\1\126\10\123\1\127\1\224\2\125"+
    "\1\126\50\143\1\147\1\144\3\143\2\0\1\74\4\0"+
    "\1\52\1\53\10\0\1\53\4\212\1\53\10\0\1\212"+
    "\10\0\1\213\3\53\1\212\2\0\1\74\5\0\1\53"+
    "\10\0\1\53\4\52\1\53\10\0\1\52\10\0\1\76"+
    "\1\225\2\53\1\52\7\143\1\147\1\146\10\143\1\146"+
    "\4\214\1\146\10\143\1\214\10\143\1\226\1\172\2\146"+
    "\1\214\50\176\1\222\1\216\53\176\1\212\1\216\5\176"+
    "\1\177\5\176\1\200\10\176\1\200\4\201\1\200\10\176"+
    "\1\201\10\176\1\217\1\154\2\200\1\201\2\176\1\177"+
    "\5\176\1\200\10\176\1\200\4\201\1\200\10\176\1\201"+
    "\10\176\1\174\1\220\2\200\1\201\51\176\1\227\3\176"+
    "\2\143\1\145\4\143\1\147\1\146\10\143\1\146\4\222"+
    "\1\146\10\143\1\222\10\143\1\223\1\172\2\146\1\222"+
    "\2\143\1\145\5\143\1\146\10\143\1\146\4\147\1\146"+
    "\10\143\1\147\10\143\1\150\1\225\2\146\1\147\2\176"+
    "\1\177\5\176\1\200\10\176\1\200\4\201\1\200\10\176"+
    "\1\201\10\176\1\230\1\231\2\200\1\201\2\176\1\177"+
    "\5\176\1\200\10\176\1\200\4\201\1\200\10\176\1\201"+
    "\10\176\1\217\1\231\2\200\1\201\2\143\1\145\5\143"+
    "\1\146\10\143\1\146\4\147\1\146\10\143\1\147\10\143"+
    "\1\150\1\232\2\146\1\147\50\176\1\222\1\215\5\176"+
    "\1\177\4\176\1\201\1\200\10\176\1\200\4\233\1\200"+
    "\10\176\1\233\10\176\1\234\1\154\2\200\1\233\2\176"+
    "\1\177\5\176\1\200\10\176\1\200\4\201\1\200\10\176"+
    "\1\201\10\176\1\230\1\220\2\200\1\201\2\176\1\177"+
    "\5\176\1\200\10\176\1\200\4\201\1\200\10\176\1\201"+
    "\10\176\1\127\1\235\2\200\1\201\2\176\1\177\4\176"+
    "\1\201\1\200\10\176\1\200\4\233\1\200\10\176\1\233"+
    "\10\176\1\234\1\220\2\200\1\233\2\176\1\177\5\176"+
    "\1\200\10\176\1\200\4\201\1\200\10\176\1\201\10\176"+
    "\1\217\1\224\2\200\1\201\2\176\1\177\5\176\1\200"+
    "\10\176\1\200\4\201\1\200\10\176\1\201\10\176\1\155"+
    "\1\220\2\200\1\201";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\1\1\3\11\5\1\1\11\3\1\1\11"+
    "\2\1\3\11\7\1\1\11\1\1\1\11\3\1\1\11"+
    "\1\1\4\0\1\11\1\1\1\11\5\0\4\1\1\11"+
    "\1\0\1\11\3\0\3\1\1\0\3\1\1\11\1\1"+
    "\1\0\5\1\1\11\1\1\3\0\1\1\4\0\1\1"+
    "\1\0\1\1\1\0\6\1\2\0\1\1\10\0\2\1"+
    "\1\0\1\1\1\11\6\1\6\0\1\1\36\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LogtalkLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case SINGLE_QUOTE_STRING: {
              yybegin(YYINITIAL); //out of memory errors if this line is not present
                                                        return TokenType.BAD_CHARACTER;
            }  // fall though
            case 158: break;
            case DOUBLE_QUOTE_STRING: {
              yybegin(YYINITIAL); //out of memory errors if this line is not present
                                                        return TokenType.BAD_CHARACTER;
            }  // fall though
            case 159: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //System.out.println("BAD_CHARACTER: " + yytext());
                                                        return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 33: break;
          case 2: 
            { yybegin(SENTENCE); return LogtalkTypes.LPAREN;
            } 
            // fall through
          case 34: break;
          case 3: 
            { yybegin(SENTENCE); return LogtalkTypes.LBRACKET;
            } 
            // fall through
          case 35: break;
          case 4: 
            { yybegin(SENTENCE); return LogtalkTypes.LBRACE;
            } 
            // fall through
          case 36: break;
          case 5: 
            { yybegin(SENTENCE); return LogtalkTypes.SYMBOLIC_ATOM;
            } 
            // fall through
          case 37: break;
          case 6: 
            { yybegin(SENTENCE); return LogtalkTypes.INTEGER;
            } 
            // fall through
          case 38: break;
          case 7: 
            { yybegin(SENTENCE); return LogtalkTypes.ANONYMOUS_VARIABLE;
            } 
            // fall through
          case 39: break;
          case 8: 
            { yybegin(SENTENCE); return LogtalkTypes.UNQUOTED_ATOM;
            } 
            // fall through
          case 40: break;
          case 9: 
            { yybegin(SINGLE_QUOTE_STRING);
            } 
            // fall through
          case 41: break;
          case 10: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 11: 
            { yybegin(SENTENCE); return LogtalkTypes.NAMED_VARIABLE;
            } 
            // fall through
          case 43: break;
          case 12: 
            { yybegin(DOUBLE_QUOTE_STRING);
            } 
            // fall through
          case 44: break;
          case 13: 
            { return LogtalkTypes.COMMENT;
            } 
            // fall through
          case 45: break;
          case 14: 
            { return LogtalkTypes.RPAREN;
            } 
            // fall through
          case 46: break;
          case 15: 
            { return LogtalkTypes.RBRACKET;
            } 
            // fall through
          case 47: break;
          case 16: 
            { return LogtalkTypes.RBRACE;
            } 
            // fall through
          case 48: break;
          case 17: 
            { yybegin(YYINITIAL); return LogtalkTypes.DOT;
            } 
            // fall through
          case 49: break;
          case 18: 
            { 
            } 
            // fall through
          case 50: break;
          case 19: 
            { yybegin(SENTENCE);
                                                        return LogtalkTypes.QUOTED_ATOM;
            } 
            // fall through
          case 51: break;
          case 20: 
            { yybegin(YYINITIAL);
                                                        return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 52: break;
          case 21: 
            { yybegin(SENTENCE);
                                                        return LogtalkTypes.STRING;
            } 
            // fall through
          case 53: break;
          case 22: 
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzMarkedPos, -1);
            { yybegin(SENTENCE); return LogtalkTypes.UNQUOTED_COMPOUND_NAME;
            } 
            // fall through
          case 54: break;
          case 23: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(SENTENCE); return LogtalkTypes.MAP_OP;
            } 
            // fall through
          case 55: break;
          case 24: 
            { yybegin(CHAR_CODE); yypushback(2);
            } 
            // fall through
          case 56: break;
          case 25: 
            // lookahead expression with fixed base length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL/*, zzStartRead, zzEndRead - zzStartRead*/, zzStartRead, 1);
            { yybegin(SENTENCE);
                                                        return LogtalkTypes.QUOTED_COMPOUND_NAME;
            } 
            // fall through
          case 57: break;
          case 26: 
            { yybegin(PARENTHESIZED_SYMBOLS); yypushback(yylength() - 1); return LogtalkTypes.LPAREN;
            } 
            // fall through
          case 58: break;
          case 27: 
            { yybegin(SENTENCE); return LogtalkTypes.FLOAT;
            } 
            // fall through
          case 59: break;
          case 28: 
            { yybegin(SENTENCE); return LogtalkTypes.BIN_NUMBER;
            } 
            // fall through
          case 60: break;
          case 29: 
            { yybegin(SENTENCE); return LogtalkTypes.OCT_NUMBER;
            } 
            // fall through
          case 61: break;
          case 30: 
            { yybegin(SENTENCE); return LogtalkTypes.HEX_NUMBER;
            } 
            // fall through
          case 62: break;
          case 31: 
            { yybegin(CHAR_CODE); yypushback(3);
            } 
            // fall through
          case 63: break;
          case 32: 
            { yybegin(SENTENCE); return LogtalkTypes.CHAR_CODE;
            } 
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
